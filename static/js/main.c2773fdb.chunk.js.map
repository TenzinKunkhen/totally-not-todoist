{"version":3,"sources":["firebase.js","constants/index.js","helpers/index.js","context/projects-context.js","hooks/index.js","context/selected-project-context.js","components/ProjectOverlay.js","components/TaskDate.js","components/AddTask.js","components/layout/Header.js","components/IndividualProject.js","components/Projects.js","components/AddProject.js","components/layout/Sidebar.js","components/Checkbox.js","components/Tasks.js","components/layout/Content.js","App.js","index.js"],"names":["firebaseConfig","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","collatedTasks","key","name","collatedTasksExist","selectedProject","find","task","generatePushId","PUSH_CHARS","lastRandChars","now","Date","getTime","timeStampChars","Array","i","charAt","Math","floor","id","join","ProjectsContext","createContext","ProjectsProvider","children","useState","projects","setProjects","useEffect","firestore","collection","where","orderBy","get","then","snapshot","allProjects","docs","map","project","data","docId","JSON","stringify","useProjects","Provider","value","useProjectsValue","useContext","SelectedProjectContext","SelectedProjectProvider","setSelectedProject","useSelectedProjectValue","ProjectOverlay","setProject","showProjectOverlay","setShowProjectOverlay","className","data-testid","onClick","TaskDate","setTaskDate","showTaskDate","setShowTaskDate","moment","format","datatest-id","add","AddTask","showAddTaskMain","shouldShowMain","showQuickAddTask","setShowQuickAddTask","setTask","taskDate","showMain","setShowMain","addTask","collatedDate","archived","date","userId","type","onChange","e","target","Header","darkMode","setDarkMode","setShouldShowMain","src","alt","dara-testid","IndividualProject","showConfirm","setShowConfirm","doc","delete","Projects","activeValue","active","setActive","data-doc-id","onKeyDown","AddProject","shouldShow","show","setShow","projectName","setProjectName","placeholder","Sidebar","showProjects","setShowProjects","undefined","Checkbox","update","Tasks","tasks","setTasks","archivedTasks","setArchivedTasks","unsubscribe","onSnapshot","newTasks","filter","diff","useTasks","length","getTitle","getCollatedTitle","document","title","Content","App","darkModeDefault","render","getElementById"],"mappings":"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","file":"static/js/main.c2773fdb.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\n\r\n\r\nconst firebaseConfig = firebase.initializeApp({\r\n    apiKey: \"AIzaSyCBfjjprMFpTB7qIUZpZrEu1RzmHRcn0Cs\",\r\n    authDomain: \"totally-not.firebaseapp.com\",\r\n    databaseURL: \"https://totally-not.firebaseio.com\",\r\n    projectId: \"totally-not\",\r\n    storageBucket: \"totally-not.appspot.com\",\r\n    messagingSenderId: \"629099667039\",\r\n    appId: \"1:629099667039:web:1e1dbeae6b0a4a5dab85ea\",\r\n    measurementId: \"G-MLQ1LS1S78\"\r\n});\r\n\r\nexport { firebaseConfig as firebase };","export const collatedTasks = [\r\n    {key: 'INBOX', name: 'Inbox'},\r\n    {key: 'TODAY', name: 'Today'},\r\n    {key: 'NEXT_7', name: 'Next 7 days'},\r\n\r\n]","import { collatedTasks } from \"../constants\";\r\n\r\nexport const getTitle = (projects, projectId) =>\r\n  projects.find((project) => project.projectId === projectId);\r\n\r\nexport const getCollatedTitle = (projects, key) =>\r\n  projects.find((project) => project.key === key);\r\n\r\nexport const collatedTasksExist = (selectedProject) =>\r\n  collatedTasks.find((task) => task.key === selectedProject);\r\n\r\n\r\n// cutout to generate new task just like firebase\r\nexport const generatePushId = (() => {\r\n  const PUSH_CHARS =\r\n    \"-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz\";\r\n\r\n  const lastRandChars = [];\r\n\r\n  return function () {\r\n    let now = new Date().getTime();\r\n\r\n    const timeStampChars = new Array(8);\r\n    for (var i = 7; i >= 0; i--) {\r\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\r\n      now = Math.floor(now / 64);\r\n    }\r\n\r\n    let id = timeStampChars.join(\"\");\r\n\r\n    for (i = 0; i < 12; i++) {\r\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\r\n    }\r\n\r\n    return id;\r\n  };\r\n})();\r\n","import React, { createContext, useContext } from 'react';\r\nimport { useProjects } from '../hooks';\r\n\r\nexport const ProjectsContext = createContext();\r\nexport const ProjectsProvider = ({children}) => {\r\n    const { projects, setProjects } = useProjects();\r\n    \r\n    return (\r\n        <ProjectsContext.Provider value={{projects, setProjects}}>\r\n            {children}\r\n        </ProjectsContext.Provider>\r\n    )\r\n};\r\n\r\nexport const useProjectsValue = () => useContext(ProjectsContext)","import { useState, useEffect } from 'react';\r\nimport { firebase } from '../firebase';\r\nimport { collatedTasksExist } from '../helpers';\r\nimport moment from 'moment';\r\n\r\n// pass in a selected project and if it doesn't exist\r\n// do stuff\r\nexport const useTasks = selectedProject => {\r\n    const [tasks, setTasks] = useState([]);\r\n    const [archivedTasks, setArchivedTasks] = useState([]);\r\n\r\n    useEffect(() => {\r\n        // check everything inside the collection\r\n        let unsubscribe = firebase.firestore().collection('tasks').where('userId', '==', 'atasfdherthyhjwrqer');\r\n\r\n        // check if there is a project but no tasks then unsubscribe\r\n        unsubscribe = selectedProject && !collatedTasksExist(selectedProject) ? \r\n        // then go retrieve unsubscribe where the project id is the selected project\r\n        (unsubscribe = unsubscribe.where('projectId', '==', selectedProject))\r\n        //check if the task is today\r\n        : selectedProject === 'TODAY'\r\n        //then get the tasks from today\r\n        ? (unsubscribe = unsubscribe.where('date', '==', moment().format('DD/MM/YYYY')))\r\n        //otherwise if it's inbox go get it from inbox\r\n        : selectedProject === 'INBOX' || selectedProject === 0\r\n        ? (unsubscribe = unsubscribe.where('date', '==', ''))\r\n        : unsubscribe;\r\n\r\n        unsubscribe = unsubscribe.onSnapshot(snapshot => {\r\n            const newTasks = snapshot.docs.map(task => ({\r\n                id: task.id,\r\n                ...task.data(),\r\n            }));\r\n            // put all the tasks into the next 7 days\r\n            setTasks(\r\n                selectedProject === 'NEXT_7'\r\n                ? newTasks.filter(\r\n                    task => moment(task.date, 'DD-MM-YYYY').diff(moment(), 'days') <= 7 &&\r\n                    task.archived !== true\r\n                )\r\n                : newTasks.filter(task => task.archived !== true)\r\n            );\r\n        //otherwise set the tasks into archived tasks\r\n        setArchivedTasks(newTasks.filter(task => task.archived !== false));\r\n        });\r\n\r\n        //return when \r\n        return () => unsubscribe();\r\n    }, [selectedProject]);\r\n    return { tasks, archivedTasks }; \r\n};\r\n\r\n\r\n//just get all the projects\r\n\r\nexport const useProjects = () => {\r\n    const [projects, setProjects] = useState([]);\r\n\r\n    useEffect(() => {\r\n        firebase.firestore().collection('projects').where('userId', '==', 'atasfdherthyhjwrqer').orderBy('projectId').get().then(snapshot => {\r\n            const allProjects = snapshot.docs.map(project => ({\r\n                ...project.data(),\r\n                docId: project.id,\r\n            }));\r\n            // check if projects are changed to stop infinite rerender\r\n            if (JSON.stringify(allProjects) !== JSON.stringify(projects)) {\r\n                setProjects(allProjects);\r\n            }\r\n        })\r\n    }, [projects])\r\n\r\n    return { projects, setProjects };\r\n\r\n}\r\n\r\n","import React, { createContext, useContext, useState } from 'react';\r\n\r\nexport const SelectedProjectContext = createContext();\r\nexport const SelectedProjectProvider = ({ children }) => {\r\n    const [ selectedProject, setSelectedProject ] = useState('INBOX')\r\n\r\n    return (\r\n        <SelectedProjectContext.Provider value={{ selectedProject, setSelectedProject }}>\r\n            {children}\r\n        </SelectedProjectContext.Provider>\r\n    )\r\n};\r\n\r\nexport const useSelectedProjectValue = () => useContext(SelectedProjectContext);","import React from \"react\";\r\nimport { useProjectsValue } from \"../context\";\r\n\r\nexport const ProjectOverlay = ({\r\n  setProject,\r\n  showProjectOverlay,\r\n  setShowProjectOverlay,\r\n}) => {\r\n  const { projects } = useProjectsValue();\r\n  return (\r\n    projects &&\r\n    showProjectOverlay && (\r\n      <div className=\"project-overlay\" data-testid=\"project-overlay\">\r\n        <ul className=\"project-overlay__list\">\r\n          {projects.map(project => (\r\n            <li\r\n              key={project.projectId}\r\n              data-testid=\"project-overlay-action\"\r\n              onClick={() => {\r\n                setProject(project.projectId);\r\n                setShowProjectOverlay(false);\r\n              }}\r\n            >\r\n              {project.name}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    )\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { FaSpaceShuttle, FaSun, FaRegPaperPlane } from \"react-icons/fa\";\r\nimport moment from \"moment\";\r\n\r\nexport const TaskDate = ({ setTaskDate, showTaskDate, setShowTaskDate }) =>\r\n  showTaskDate && (\r\n    <div className=\"task-date\" data-testid=\"task-date-overlay\">\r\n      <ul className=\"task-date__list\">\r\n        <li\r\n          onClick={() => {\r\n            setShowTaskDate(false);\r\n            setTaskDate(moment().format(\"DD/MM/YYYY\"));\r\n          }}\r\n          datatest-id=\"task-date-overlay\"\r\n        >\r\n          <span>\r\n            <FaSpaceShuttle />\r\n          </span>\r\n          <span>Today</span>\r\n        </li>\r\n        <li\r\n          onClick={() => {\r\n            setShowTaskDate(false);\r\n            setTaskDate(moment().add(1, \"day\").format(\"DD/MM/YYYY\"));\r\n          }}\r\n          datatest-id=\"task-date-tomorrow\"\r\n        >\r\n          <span>\r\n            <FaSun />\r\n          </span>\r\n          <span>Tomorrow</span>\r\n        </li>\r\n        <li\r\n          onClick={() => {\r\n            setShowTaskDate(false);\r\n            setTaskDate(moment().add(7, \"days\").format(\"DD/MM/YYYY\"));\r\n          }}\r\n          datatest-id=\"task-date-next-week\"\r\n        >\r\n          <span>\r\n            <FaRegPaperPlane />\r\n          </span>\r\n          <span>Next Week</span>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n","import React, { useState } from \"react\";\r\nimport { FaRegListAlt, FaRegCalendarAlt } from \"react-icons/fa\";\r\nimport moment from \"moment\";\r\nimport { firebase } from \"../firebase\";\r\nimport { useSelectedProjectValue } from \"../context\";\r\nimport { ProjectOverlay } from \"./ProjectOverlay\";\r\nimport { TaskDate } from \"./TaskDate\";\r\n\r\nexport const AddTask = ({\r\n  showAddTaskMain = true,\r\n  shouldShowMain = false,\r\n  showQuickAddTask,\r\n  setShowQuickAddTask,\r\n}) => {\r\n  const [task, setTask] = useState(\"\");\r\n  const [taskDate, setTaskDate] = useState(\"\");\r\n  const [project, setProject] = useState(\"\");\r\n  const [showMain, setShowMain] = useState(shouldShowMain);\r\n  const [showProjectOverlay, setShowProjectOverlay] = useState(false);\r\n  const [showTaskDate, setShowTaskDate] = useState(false);\r\n\r\n  const { selectedProject } = useSelectedProjectValue();\r\n  const addTask = () => {\r\n    const projectId = project || selectedProject;\r\n    let collatedDate = \"\";\r\n\r\n    if (projectId === \"TODAY\") {\r\n      collatedDate = moment().format(\"DD/MM/YYYY\");\r\n    } else if (projectId === \"NEXT_7\") {\r\n      collatedDate = moment().add(7, \"days\").format(\"DD/MM/YYYY\");\r\n    }\r\n    return (\r\n      task &&\r\n      projectId &&\r\n      firebase\r\n        .firestore()\r\n        .collection(\"tasks\")\r\n        .add({\r\n          archived: false,\r\n          projectId,\r\n          task,\r\n          date: collatedDate || taskDate,\r\n          userId: \"atasfdherthyhjwrqer\",\r\n        })\r\n        .then(() => {\r\n          setTask(\"\");\r\n          setProject(\"\");\r\n          setShowMain(\"\");\r\n          setShowProjectOverlay(false);\r\n        })\r\n    );\r\n  };\r\n  return (\r\n    <div\r\n      className={showQuickAddTask ? \"add-task add-task__overlay\" : \"add-task\"}\r\n      data-testid=\"add-task-comp\"\r\n    >\r\n      {showAddTaskMain && (\r\n        <div\r\n          className=\"add-task__shallow\"\r\n          datatest-id=\"show-main-action\"\r\n          onClick={() => setShowMain(!showMain)}\r\n        >\r\n          <span className=\"add-task__plus\">+</span>\r\n          <span className=\"add-task__text\">Add Task</span>\r\n        </div>\r\n      )}\r\n\r\n      {(showMain || showQuickAddTask) && (\r\n        <div className=\"add-task__main\" data-testid=\"add-task-main\">\r\n          {showQuickAddTask && (\r\n            <>\r\n              <div datatest-id=\"quick-add-task\">\r\n                <h2 className=\"header\">Quick Add Task</h2>\r\n                <span\r\n                  className=\"add-task__cancel-x\"\r\n                  data-testid=\"add-task-quick-cancel\"\r\n                  onClick={() => {\r\n                    setShowMain(false);\r\n                    setShowProjectOverlay(false);\r\n                    setShowQuickAddTask(false);\r\n                  }}\r\n                >\r\n                  X\r\n                </span>\r\n              </div>\r\n            </>\r\n          )}\r\n          <ProjectOverlay\r\n            setProject={setProject}\r\n            showProjectOverlay={showProjectOverlay}\r\n            setShowProjectOverlay={setShowProjectOverlay}\r\n          />\r\n          <TaskDate\r\n            setTaskDate={setTaskDate}\r\n            showTaskDate={showTaskDate}\r\n            setShowTaskDate={setShowTaskDate}\r\n          />\r\n          <input\r\n            className=\"add-task__content\"\r\n            data-testid=\"add-task-content\"\r\n            type=\"text\"\r\n            value={task}\r\n            onChange={(e) => setTask(e.target.value)}\r\n          />\r\n          <button\r\n            type=\"button\"\r\n            className=\"add-task__submit\"\r\n            data-testid=\"add-task\"\r\n            onClick={() =>\r\n              showQuickAddTask\r\n                ? addTask() && setShowQuickAddTask(false)\r\n                : addTask()\r\n            }\r\n          >\r\n            Add task\r\n          </button>\r\n          {!showQuickAddTask && (\r\n            <span\r\n              className=\"add-task__cancel\"\r\n              data-testid=\"add-task-main-cancel\"\r\n              onClick={() => {\r\n                setShowMain(false);\r\n                setShowProjectOverlay(false);\r\n              }}\r\n            >\r\n              Cancel\r\n            </span>\r\n          )}\r\n          <span\r\n            className=\"add-task__project\"\r\n            datatest-id=\"show-project-overlay\"\r\n            onClick={() => setShowProjectOverlay(!showProjectOverlay)}\r\n          >\r\n            <FaRegListAlt />\r\n          </span>\r\n          <span\r\n            className=\"add-task__date\"\r\n            datatest-id=\"show-task-date-overlay\"\r\n            onClick={() => setShowTaskDate(!showTaskDate)}\r\n          >\r\n            <FaRegCalendarAlt />\r\n          </span>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { FaPizzaSlice } from \"react-icons/fa\";\r\nimport { AddTask } from \"../AddTask\";\r\n\r\nexport const Header = ({ darkMode, setDarkMode }) => {\r\n  const [shouldShowMain, setShouldShowMain] = useState(false);\r\n  const [showQuickAddTask, setShowQuickAddTask] = useState(false);\r\n  return (\r\n    <header className=\"header\" data-testid=\"header\">\r\n      <nav>\r\n        <div className=\"logo\">\r\n          <img src=\"/images/logo.png\" alt=\"Todoist\" />\r\n        </div>\r\n        <div className=\"settings\">\r\n          <ul>\r\n            <li\r\n              dara-testid=\"quick-add-task-action\"\r\n              className=\"settings__add\"\r\n              onClick={() => {\r\n                setShowQuickAddTask(true);\r\n                setShouldShowMain(true);\r\n              }}\r\n            >\r\n              +\r\n            </li>\r\n            <li\r\n              data-testid=\"dark-mode-action\"\r\n              className=\"settings__darkmode\"\r\n              onClick={() => setDarkMode(!darkMode)}\r\n            >\r\n              <FaPizzaSlice />\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n      <AddTask\r\n        showAddTaskMain={false}\r\n        shouldShowMain={shouldShowMain}\r\n        showQuickAddTask={showQuickAddTask}\r\n        setShowQuickAddTask={setShowQuickAddTask}\r\n      />\r\n    </header>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { FaTrashAlt } from \"react-icons/fa\";\r\nimport { useProjectsValue, useSelectedProjectValue } from \"../context\";\r\nimport { firebase } from \"../firebase\";\r\n\r\nconst IndividualProject = ({ project }) => {\r\n  const [showConfirm, setShowConfirm] = useState(false);\r\n  const { projects, setProjects } = useProjectsValue();\r\n  const { setSelectedProject } = useSelectedProjectValue();\r\n\r\n  const deleteProject = docId => {\r\n    firebase\r\n      .firestore()\r\n      .collection('projects')\r\n      .doc(docId)\r\n      .delete()\r\n      .then(() => {\r\n        setProjects([...projects]);\r\n        setSelectedProject('INBOX');\r\n      });\r\n  };\r\n  return (\r\n    <>\r\n      <span className=\"sidebar__dot\">•</span>\r\n      <span className=\"sidebar__project-name\">{project.name}</span>\r\n      <span\r\n        className=\"sidebar__project-delete\"\r\n        data-testid=\"delete-project\"\r\n        onClick={() => setShowConfirm(!showConfirm)}\r\n      >\r\n        <FaTrashAlt />\r\n        {showConfirm && (\r\n          <div className=\"project-delete-modal\">\r\n            <div className=\"project-delete-modal__inner\">\r\n              <p> Are you sure you want to delete this project?</p>\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => deleteProject(project.docId)}\r\n              >\r\n                Delete\r\n              </button>\r\n              <span onClick={() => setShowConfirm(!showConfirm)}>Cancel</span>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </span>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IndividualProject;\r\n","import React, { useState } from \"react\";\r\nimport { useProjectsValue, useSelectedProjectValue } from \"../context\";\r\nimport IndividualProject from \"./IndividualProject\";\r\n\r\nexport const Projects = ({ activeValue = true }) => {\r\n  const [active, setActive] = useState(activeValue);\r\n  const { setSelectedProject } = useSelectedProjectValue();\r\n  const { projects } = useProjectsValue();\r\n\r\n  return (\r\n    projects &&\r\n    projects.map((project) => (\r\n      <li\r\n        key={project.projectId}\r\n        data-doc-id={project.docId}\r\n        data-testid=\"project-action\"\r\n        className={\r\n          active === project.projectId\r\n            ? \"active sidebar__project\"\r\n            : \"sidebar__project\"\r\n        }\r\n        onClick={() => {\r\n          setActive(project.projectId);\r\n          setSelectedProject(project.projectId);\r\n        }}\r\n        onKeyDown={() => {\r\n          setActive(project.projectId);\r\n          setSelectedProject(project.projectId);\r\n        }}\r\n      >\r\n        <IndividualProject project={project} />\r\n      </li>\r\n    ))\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { firebase } from \"../firebase\";\r\nimport { generatePushId } from \"../helpers\";\r\nimport { useProjectsValue } from \"../context\";\r\n\r\nexport const AddProject = ({ shouldShow = false }) => {\r\n  const [show, setShow] = useState(shouldShow);\r\n  const [projectName, setProjectName] = useState(\"\");\r\n\r\n  const projectId = generatePushId();\r\n  const { projects, setProjects } = useProjectsValue();\r\n\r\n  const addProject = () =>\r\n    projectName &&\r\n    firebase\r\n      .firestore()\r\n      .collection(\"projects\")\r\n      .add({ projectId, name: projectName, userId: \"atasfdherthyhjwrqer\" })\r\n      .then(() => {\r\n        setProjects([...projects]);\r\n        setProjectName(\"\");\r\n        setShow(false);\r\n      });\r\n  return (\r\n    <div className=\"add-project\" data-testid=\"add-project\">\r\n      {show && (\r\n        <div className=\"add-project__input\">\r\n          <input\r\n            value={projectName}\r\n            onChange={(e) => setProjectName(e.target.value)}\r\n            className=\"add-project__name\"\r\n            data-testid=\"project-name\"\r\n            type=\"text\"\r\n            placeholder=\"Name your project\"\r\n          />\r\n          <button\r\n            className=\"add-project__submit\"\r\n            type=\"button\"\r\n            onClick={() => addProject()}\r\n            data-testid=\"add-project-submit\"\r\n          >\r\n            Add Project\r\n          </button>\r\n          <span\r\n            data-testid=\"hide-project-overlay\"\r\n            className=\"add-project__cancel\"\r\n            onClick={() => setShow(false)}\r\n          >\r\n            Cancel\r\n          </span>\r\n        </div>\r\n      )}\r\n\r\n      <span className=\"add-project__plus\">+</span>\r\n      <span\r\n        data-testid=\"add-project-action\"\r\n        className=\"add-project__text\"\r\n        onClick={() => setShow(!show)}\r\n      >\r\n        Add Project\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  FaChevronDown,\r\n  FaInbox,\r\n  FaRegCalendarAlt,\r\n  FaRegCalendar,\r\n} from \"react-icons/fa\";\r\nimport { useSelectedProjectValue } from \"../../context\";\r\nimport { Projects } from \"../Projects\";\r\nimport { AddProject } from \"../AddProject\";\r\n\r\nexport const Sidebar = () => {\r\n  const { setSelectedProject } = useSelectedProjectValue();\r\n  const [active, setActive] = useState(\"inbox\");\r\n  const [showProjects, setShowProjects] = useState(true);\r\n\r\n  return (\r\n    <div className=\"sidebar\" data-testid=\"sidebar\">\r\n      <ul className=\"sidebar__generic\">\r\n        <li\r\n          data-testid=\"inbox\"\r\n          className={active === \"inbox\" ? \"active\" : undefined}\r\n          onClick={() => {\r\n            setActive(\"inbox\");\r\n            setSelectedProject(\"INBOX\");\r\n          }}\r\n        >\r\n          <span>\r\n            <FaInbox />\r\n          </span>\r\n          <span>Inbox</span>\r\n        </li>\r\n        <li\r\n          data-testid=\"today\"\r\n          className={active === \"today\" ? \"active\" : undefined}\r\n          onClick={() => {\r\n            setActive(\"today\");\r\n            setSelectedProject(\"TODAY\");\r\n          }}\r\n        >\r\n          <span>\r\n            <FaRegCalendar />\r\n          </span>\r\n          <span>Today</span>\r\n        </li>\r\n        <li\r\n          data-testid=\"next_7\"\r\n          className={active === \"next_7\" ? \"active\" : undefined}\r\n          onClick={() => {\r\n            setActive(\"next_7\");\r\n            setSelectedProject(\"NEXT_7\");\r\n          }}\r\n        >\r\n          <span>\r\n            <FaRegCalendarAlt />\r\n          </span>\r\n          <span>Next 7 days</span>\r\n        </li>\r\n      </ul>\r\n      <div className=\"sidebar__middle\" onClick={() => setShowProjects(!showProjects)}>\r\n        <span>\r\n          <FaChevronDown className={!showProjects ? 'hidden-projects' : undefined}/>\r\n        </span>\r\n        <h2>Projects</h2>\r\n      </div>\r\n      <ul className=\"sidebar__projects\">{showProjects && <Projects />}</ul>\r\n      {showProjects && <AddProject />}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { firebase } from '../firebase';\r\n\r\nexport const Checkbox = ({ id }) => {\r\n    const archiveTask = () => {\r\n        firebase\r\n        .firestore()\r\n        .collection('tasks')\r\n        .doc(id)\r\n        .update({\r\n            archived: true\r\n        });\r\n    };\r\n    return (\r\n        <div className=\"checkbox-holder\" data-testid=\"checkbox-action\"\r\n        onClick={() => archiveTask()}\r\n        >\r\n            <span className=\"checkbox\" />\r\n        </div>\r\n    )\r\n}","import React, { useEffect } from \"react\";\r\nimport { Checkbox } from \"./Checkbox\";\r\nimport { collatedTasks } from \"../constants\";\r\nimport { getTitle, getCollatedTitle, collatedTasksExist } from \"../helpers\";\r\nimport { useTasks } from \"../hooks\";\r\nimport { useSelectedProjectValue, useProjectsValue } from \"../context\";\r\nimport { AddTask } from \"./AddTask\";\r\n\r\nexport const Tasks = () => {\r\n  const { selectedProject } = useSelectedProjectValue();\r\n  const { projects } = useProjectsValue();\r\n  const { tasks } = useTasks(selectedProject);\r\n  let projectName = \"\";\r\n\r\n  if (projects.length > 0 && selectedProject && !collatedTasksExist(selectedProject)) {\r\n    projectName = getTitle(projects, selectedProject).name;\r\n  }\r\n\r\n  if (collatedTasksExist(selectedProject) && selectedProject) {\r\n    projectName = getCollatedTitle(collatedTasks, selectedProject).name;\r\n  }\r\n\r\n  useEffect(() => {\r\n    document.title = `${projectName}: Todoist`;\r\n  });\r\n\r\n  return (\r\n    <div className=\"tasks\" data-testid=\"tasks\">\r\n      <h2 data-testid=\"project-name\">{projectName}</h2>\r\n\r\n      <ul className=\"tasks__list\">\r\n        {tasks.map((task) => (\r\n          <li key={`${task.id}`}>\r\n            <Checkbox id={task.id} />\r\n            <span>{task.task}</span>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      <AddTask />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Sidebar } from './Sidebar';\r\nimport { Tasks } from '../Tasks';\r\n\r\nexport const Content = () => (\r\n    <section className=\"content\">\r\n        <Sidebar />\r\n        <Tasks />\r\n    </section>\r\n)","import React, { useState } from \"react\";\nimport { Header } from \"./components/layout/Header\";\nimport { Content } from \"./components/layout/Content\";\nimport { ProjectsProvider, SelectedProjectProvider } from \"./context\";\nexport const App = ({ darkModeDefault = false }) => {\n  const [darkMode, setDarkMode] = useState(darkModeDefault)\n  return (\n    <SelectedProjectProvider>\n      <ProjectsProvider>\n        <main\n        datatest-id=\"application\"\n        className={darkMode ? \"darkmode\" : undefined}\n        >\n          <Header darkMode={darkMode} setDarkMode={setDarkMode}/>\n          <Content />\n        </main>\n      </ProjectsProvider>\n    </SelectedProjectProvider>\n  );\n};\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { App } from './App';\nimport './App.scss';\n\nrender(<App />, document.getElementById('root'));"],"sourceRoot":""}